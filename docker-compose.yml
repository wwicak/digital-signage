version: '3.8'

services:
  # Development Environment
  app-dev-frontend:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: digital-signage-dev-frontend
    ports:
      - "3000:3000" # Next.js dev server
    volumes:
      - .:/app # Mount current directory to /app in container
      - /app/node_modules # Exclude node_modules from host mount to use container's version
      - /app/.next # Exclude .next from host mount
    command: bun run dev
    env_file:
      - .env # Load environment variables from .env file
    environment:
      - NODE_ENV=development
    networks:
      - dev-network

  app-dev-backend:
    build:
      context: .
      dockerfile: Dockerfile.dev # Can reuse the same dev Dockerfile
    container_name: digital-signage-dev-backend
    ports:
      - "3001:3001" # Backend server
    volumes:
      - .:/app
      - /app/node_modules
      - /app/dist # Exclude dist from host mount
    command: bun run dev:server
    env_file:
      - .env
    environment:
      - NODE_ENV=development
      - ENVIRON=DEV
      # Add any other backend specific dev env vars here
    depends_on:
      - app-dev-frontend # Optional: if backend depends on frontend build step or availability
    networks:
      - dev-network

  # Production Environment
  app-prod:
    build:
      context: .
      dockerfile: Dockerfile # This is the multi-stage production Dockerfile
      # Example of passing build-time variables for production, if needed by next.config.js
      # args:
      #   - NEXT_PUBLIC_API_URL=https://your-production-api.com
    container_name: digital-signage-prod
    ports:
      - "8080:3001" # Map host 8080 to container's backend server port 3001
    env_file:
      - .env # Load environment variables from .env file for production
             # Ensure this .env file is configured for production and does not contain dev values
             # Secrets should ideally be injected via orchestration tools in a real prod setup
    environment:
      - NODE_ENV=production
      - ENVIRON=PROD
      # - PORT=3001 # Already set in server.ts, but can be overridden
    # volumes:
      # - uploads_data:/app/uploads # Example for persisting uploads if needed
    networks:
      - prod-network

# Define named volumes if used (e.g., for uploads persistence)
# volumes:
#   uploads_data:

networks:
  dev-network:
    driver: bridge
  prod-network:
    driver: bridge
